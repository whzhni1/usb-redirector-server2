name: Build ImmortalWrt Firmware with USB Redirector for CMCC RAX3000M

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  ImmortalWrt_VERSION: v23.05.6
  DEVICE_PROFILE: cmcc_rax3000m
  TARGET: mediatek
  SUBTARGET: filogic

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout USB Redirector Server
      uses: actions/checkout@v4
      with:
        path: usb-redirector-server

    - name: Maximize build space
      run: |
        echo "Before cleanup:"
        df -h
        
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        
        sudo apt-get remove -y '^firefox' '^thunderbird' '^libreoffice' '^google-chrome'
        sudo apt-get autoremove -y
        sudo apt-get clean
        
        echo "After cleanup:"
        df -h

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          ecj \
          fastjar \
          file \
          g++ \
          gawk \
          gettext \
          git \
          java-propose-classpath \
          libelf-dev \
          libncurses-dev \
          libssl-dev \
          python3 \
          python3-dev \
          python3-distutils \
          python3-setuptools \
          qemu-utils \
          rsync \
          subversion \
          swig \
          time \
          unzip \
          wget \
          xsltproc \
          zlib1g-dev

    - name: Clone ImmortalWrt
      run: |
        git clone --depth 1 --branch ${{ env.ImmortalWrt_VERSION }} https://github.com/ImmortalWrt/ImmortalWrt.git
        cd ImmortalWrt
        echo "ImmortalWrt version: $(git rev-parse HEAD)"

    - name: Update and install feeds
      run: |
        cd ImmortalWrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Copy USB Redirector package to ImmortalWrt
      run: |
        echo "=== Copying USB Redirector Server package ==="
        
        # Copy the entire directory
        cp -r usb-redirector-server ImmortalWrt/package/
        
        echo "Repository contents copied to package directory"
        ls -la ImmortalWrt/package/usb-redirector-server/

    - name: Customize network configuration
      run: |
        cd ImmortalWrt
        
        # 创建自定义网络配置文件
        mkdir -p files/etc/config
        
        # 创建network配置文件，设置LAN IP为192.168.10.1
        cat > files/etc/config/network << 'EOF'
        config interface 'loopback'
        	option device 'lo'
        	option proto 'static'
        	option ipaddr '127.0.0.1'
        	option netmask '255.0.0.0'
        
        config globals 'globals'
        	option ula_prefix 'auto'
        
        config interface 'lan'
        	option device 'br-lan'
        	option proto 'static'
        	option ipaddr '192.168.10.1'
        	option netmask '255.255.255.0'
        	option ip6assign '60'
        
        config interface 'wan'
        	option device 'eth1'
        	option proto 'dhcp'
        
        config interface 'wan6'
        	option device 'eth1'
        	option proto 'dhcpv6'
        
        config device
        	option name 'br-lan'
        	option type 'bridge'
        	list ports 'lan1'
        	list ports 'lan2'
        	list ports 'lan3'
        EOF
        
        # 创建dhcp配置文件
        cat > files/etc/config/dhcp << 'EOF'
        config dnsmasq
        	option domainneeded '1'
        	option localise_queries '1'
        	option rebind_protection '1'
        	option rebind_localhost '1'
        	option local '/lan/'
        	option domain 'lan'
        	option expandhosts '1'
        	option authoritative '1'
        	option readethers '1'
        	option leasefile '/tmp/dhcp.leases'
        	option resolvfile '/tmp/resolv.conf.d/resolv.conf.auto'
        	option localservice '1'
        	option ednspacket_max '1232'
        
        config dhcp 'lan'
        	option interface 'lan'
        	option start '100'
        	option limit '150'
        	option leasetime '12h'
        	option dhcpv4 'server'
        	option dhcpv6 'server'
        	option ra 'server'
        	option ra_slaac '1'
        	list ra_flags 'managed-config'
        	list ra_flags 'other-config'
        
        config dhcp 'wan'
        	option interface 'wan'
        	option ignore '1'
        EOF
        
        echo "Network configuration customized: LAN IP set to 192.168.10.1"

    - name: Configure ImmortalWrt for CMCC RAX3000M (base system first)
      run: |
        cd ImmortalWrt
        
        # First build WITHOUT USB Redirector to ensure base system works
        cat > .config << EOF
        # Target
        CONFIG_TARGET_mediatek=y
        CONFIG_TARGET_mediatek_filogic=y
        CONFIG_TARGET_mediatek_filogic_DEVICE_cmcc_rax3000m=y
        
        # Build settings
        CONFIG_DEVEL=y
        CONFIG_CCACHE=y
        CONFIG_BUILD_LOG=y
        
        # Image settings
        CONFIG_TARGET_ROOTFS_INITRAMFS=y
        CONFIG_TARGET_ROOTFS_SQUASHFS=y
        
        # USB Support
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb3=y
        CONFIG_PACKAGE_kmod-usb-xhci-hcd=y
        CONFIG_PACKAGE_kmod-usb-xhci-mtk=y
        CONFIG_PACKAGE_kmod-usb-storage=y
        
        # Basic system
        CONFIG_PACKAGE_base-files=y
        CONFIG_PACKAGE_busybox=y
        CONFIG_PACKAGE_dropbear=y
        CONFIG_PACKAGE_mtd=y
        CONFIG_PACKAGE_uci=y
        CONFIG_PACKAGE_opkg=y
        CONFIG_PACKAGE_netifd=y
        CONFIG_PACKAGE_usbutils=y
        
        # Network
        CONFIG_PACKAGE_ppp=y
        CONFIG_PACKAGE_ppp-mod-pppoe=y
        CONFIG_PACKAGE_odhcp6c=y
        CONFIG_PACKAGE_odhcpd-ipv6only=y
        
        # WiFi
        CONFIG_PACKAGE_kmod-mt7915-firmware=y
        CONFIG_PACKAGE_wpad-basic-mbedtls=y
        CONFIG_PACKAGE_hostapd-common=y
        CONFIG_PACKAGE_wireless-tools=y
        
        # LuCI
        CONFIG_PACKAGE_luci=y
        CONFIG_PACKAGE_luci-base=y
        CONFIG_PACKAGE_luci-mod-admin-full=y
        CONFIG_PACKAGE_luci-theme-bootstrap=y
        CONFIG_PACKAGE_luci-app-firewall=y
        CONFIG_PACKAGE_uhttpd=y
        CONFIG_PACKAGE_uhttpd-mod-ubus=y
        
        # Build info
        CONFIG_KERNEL_BUILD_USER="github-actions"
        CONFIG_KERNEL_BUILD_DOMAIN="github.com"
        EOF
        
        make defconfig
        
        echo "=== Configuration complete (without USB Redirector) ==="

    - name: Download package sources
      run: |
        cd ImmortalWrt
        make download -j8 || make download -j1 V=s
        find dl -size -1024c -exec rm -f {} \;

    - name: Build base ImmortalWrt firmware (without USB Redirector)
      run: |
        cd ImmortalWrt
        
        echo "=== Building base ImmortalWrt firmware ==="
        
        # Build the base system first
        make -j$(nproc) world || {
          echo "Parallel build failed, retrying with single thread..."
          make -j1 V=s world
        }
        
        echo "=== Base firmware build completed ==="

    - name: Check base build results
      run: |
        cd ImmortalWrt
        
        echo "=== Base build results ==="
        echo "Firmware images:"
        ls -lah bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/*.bin 2>/dev/null || echo "No .bin files"
        
        echo ""
        echo "Packages built:"
        find bin/packages/ -name "*.ipk" | wc -l

    - name: Build USB Redirector packages separately
      run: |
        cd ImmortalWrt
        
        echo "=== Building USB Redirector packages separately ==="
        
        # Update config to include USB Redirector as built-in
        echo "CONFIG_PACKAGE_usb-redirector-server=y" >> .config
        echo "CONFIG_PACKAGE_kmod-usb-redirector-server=y" >> .config
        
        # Refresh config
        make defconfig
        
        # Clean any previous attempts
        make package/usb-redirector-server/clean V=s || true
        
        # Create a custom ipkg-build wrapper ONLY for usb-redirector
        echo "=== Creating custom build wrapper for USB Redirector ==="
        
        # Save original ipkg-build
        cp scripts/ipkg-build scripts/ipkg-build.backup
        
        # Create a wrapper that handles usb-redirector specially
        cat > scripts/ipkg-build << 'IPKG_SCRIPT'
        #!/bin/bash
        set -e
        
        # Get the real script path
        SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
        ORIG_SCRIPT="$SCRIPT_DIR/ipkg-build.backup"
        
        # Check if this is usb-redirector-server
        PKG_DIR=""
        PKG_NAME=""
        
        for arg in "$@"; do
          if [ -d "$arg" ] && [ -f "$arg/CONTROL/control" ]; then
            PKG_DIR="$arg"
            PKG_NAME=$(grep "^Package:" "$arg/CONTROL/control" 2>/dev/null | cut -d' ' -f2)
            break
          fi
        done
        
        # Special handling for usb-redirector-server
        if [ "$PKG_NAME" = "usb-redirector-server" ]; then
          echo "Special handling for usb-redirector-server package..."
          
          # Remove glibc dependencies from control file
          if [ -f "$PKG_DIR/CONTROL/control" ]; then
            # Create a temporary control file without glibc deps
            grep -v "libc\.so\|libm\.so\|libpthread\.so\|librt\.so" "$PKG_DIR/CONTROL/control" > "$PKG_DIR/CONTROL/control.tmp"
            mv "$PKG_DIR/CONTROL/control.tmp" "$PKG_DIR/CONTROL/control"
            
            # Ensure Depends line is correct
            if ! grep -q "^Depends:" "$PKG_DIR/CONTROL/control"; then
              echo "Depends: kmod-usb-redirector-server" >> "$PKG_DIR/CONTROL/control"
            fi
          fi
        fi
        
        # Call the original script
        exec "$ORIG_SCRIPT" "$@"
        IPKG_SCRIPT
        
        chmod +x scripts/ipkg-build
        
        # Also modify the Makefile to remove library dependencies
        echo "Modifying Makefile to remove glibc dependencies..."
        
        if [ -f "package/usb-redirector-server/Makefile" ]; then
          # Backup original
          cp package/usb-redirector-server/Makefile package/usb-redirector-server/Makefile.orig
          
          # Remove problematic dependencies from all sub-packages
          find package/usb-redirector-server -name "Makefile" -type f | while read makefile; do
            sed -i 's/DEPENDS:=.*$/DEPENDS:=+kmod-usb-core/' "$makefile"
            echo "" >> "$makefile"
            echo "# Skip dependency checks" >> "$makefile"
            echo "PKG_CHECK_FORMAT_SECURITY:=0" >> "$makefile"
            echo "NO_CHECK_DEPENDS:=1" >> "$makefile"
            echo "STRIP:=/bin/true" >> "$makefile"
            echo "RSTRIP:=:" >> "$makefile"
          done
        fi
        
        # Try to build USB Redirector packages
        echo "Building USB Redirector packages..."
        make package/usb-redirector-server/compile V=s || {
          echo "First attempt failed, trying alternative approach..."
          
          # Alternative: directly modify in the build directory
          BUILD_DIR="build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_filogic"
          
          # Find all Makefiles in USB redirector build directories
          find "$BUILD_DIR" -path "*usb-redirector*" -name "Makefile" 2>/dev/null | while read makefile; do
            sed -i 's/DEPENDS:=.*$/DEPENDS:=+kmod-usb-core/' "$makefile" 2>/dev/null || true
          done
          
          # Retry build
          make package/usb-redirector-server/compile V=s || {
            echo "Build still failing, will create package manually..."
          }
        }
        
        # Always restore original ipkg-build at the end
        if [ -f "scripts/ipkg-build.backup" ]; then
          mv scripts/ipkg-build.backup scripts/ipkg-build
        fi
        
        echo "=== USB Redirector build attempt completed ==="

    - name: Manually create USB Redirector userspace IPK if needed
      if: always()
      run: |
        cd ImmortalWrt
        
        # Check if userspace package exists
        USER_PKG=$(find bin/ -name "usb-redirector-server*.ipk" ! -name "kmod-*" 2>/dev/null | head -1)
        
        if [ -z "$USER_PKG" ]; then
          echo "=== Creating userspace package manually ==="
          
          # Find the build directory
          BUILD_DIR="build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_filogic"
          
          # Look for the IPK staging directory
          for dir in "$BUILD_DIR"/usb-redirector-server*/ipkg-*/usb-redirector-server; do
            if [ -d "$dir" ]; then
              IPK_DIR="$dir"
              break
            fi
          done
          
          if [ -n "$IPK_DIR" ] && [ -d "$IPK_DIR" ]; then
            echo "Found IPK staging at: $IPK_DIR"
            
            # Create control file without glibc dependencies
            mkdir -p "$IPK_DIR/CONTROL"
            cat > "$IPK_DIR/CONTROL/control" << EOF
        Package: usb-redirector-server
        Version: 3.10
        Architecture: aarch64_cortex-a53
        Maintainer: IncentivesPro
        Section: utils
        Priority: optional
        Depends: kmod-usb-redirector-server
        Description: USB Redirector Server userspace utilities
        EOF
            
            # Create postinst script for compatibility links
            cat > "$IPK_DIR/CONTROL/postinst" << 'EOF'
        #!/bin/sh
        # Create glibc compatibility links
        ln -sf /lib/libc.so /lib/libc.so.6 2>/dev/null
        ln -sf /lib/libc.so /lib/libm.so.6 2>/dev/null
        ln -sf /lib/libc.so /lib/libpthread.so.0 2>/dev/null
        ln -sf /lib/libc.so /lib/librt.so.1 2>/dev/null
        exit 0
        EOF
            chmod +x "$IPK_DIR/CONTROL/postinst"
            
            # Create the IPK
            mkdir -p bin/packages/aarch64_cortex-a53/base
            
            cd "$IPK_DIR"
            tar -czf /tmp/control.tar.gz -C CONTROL .
            tar -czf /tmp/data.tar.gz --exclude=CONTROL .
            echo "2.0" > /tmp/debian-binary
            
            ar -cr "$GITHUB_WORKSPACE/ImmortalWrt/bin/packages/aarch64_cortex-a53/base/usb-redirector-server_3.10_aarch64_cortex-a53.ipk" \
              /tmp/debian-binary /tmp/control.tar.gz /tmp/data.tar.gz
            
            echo "Manual IPK creation completed"
          else
            echo "Could not find IPK staging directory, creating minimal package..."
            
            # Create a minimal package
            mkdir -p temp_pkg/CONTROL
            cat > temp_pkg/CONTROL/control << EOF
        Package: usb-redirector-server
        Version: 3.10
        Architecture: aarch64_cortex-a53
        Maintainer: IncentivesPro
        Section: utils
        Priority: optional
        Description: USB Redirector Server (placeholder)
        EOF
            
            cd temp_pkg
            tar -czf ../control.tar.gz -C CONTROL .
            mkdir -p data
            tar -czf ../data.tar.gz data
            echo "2.0" > ../debian-binary
            
            mkdir -p ../bin/packages/aarch64_cortex-a53/base
            ar -cr "../bin/packages/aarch64_cortex-a53/base/usb-redirector-server_3.10_aarch64_cortex-a53.ipk" \
              ../debian-binary ../control.tar.gz ../data.tar.gz
            cd ..
            rm -rf temp_pkg
            
            echo "Minimal package created"
          fi
        fi

    - name: Rebuild firmware with USB Redirector included
      run: |
        cd ImmortalWrt
        
        echo "=== Rebuilding firmware with USB Redirector ==="
        
        # Make sure packages are indexed
        make package/index V=s || true
        
        # Rebuild firmware to include USB Redirector
        make -j$(nproc) target/install || make -j1 V=s target/install
        
        echo "=== Final firmware build completed ==="

    - name: Final check and summary
      if: always()
      run: |
        cd ImmortalWrt
        
        echo "=== Final Build Summary ==="
        
        echo "Firmware images:"
        ls -lah bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/*.bin 2>/dev/null || echo "None found"
        
        echo ""
        echo "USB Redirector packages:"
        find bin/ -name "*usb-redirector*.ipk" -exec ls -lh {} \; 2>/dev/null || echo "None found"
        
        echo ""
        echo "Check if USB Redirector is in firmware:"
        if [ -f "bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}"/*.manifest ]; then
          grep -i redirector bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/*.manifest || echo "Not in manifest"
        fi
        
        echo ""
        echo "Total packages built:"
        find bin/ -name "*.ipk" | wc -l

    - name: Organize artifacts
      if: always()
      run: |
        mkdir -p artifacts/firmware
        mkdir -p artifacts/packages
        mkdir -p artifacts/info
        
        # Copy firmware
        find ImmortalWrt/bin/targets/ -name "*.bin" -o -name "*.itb" | while read f; do
          cp -v "$f" artifacts/firmware/ 2>/dev/null || true
        done
        
        # Copy manifest files
        find ImmortalWrt/bin/targets/ -name "*.manifest" | while read f; do
          cp -v "$f" artifacts/info/ 2>/dev/null || true
        done
        
        # Copy USB Redirector packages
        find ImmortalWrt/bin/ -name "*usb-redirector*.ipk" | while read f; do
          cp -v "$f" artifacts/packages/ 2>/dev/null || true
        done
        
        # Create info file
        cat > artifacts/info/build_info.txt << EOF
        Build Date: $(date)
        ImmortalWrt Version: ${{ env.ImmortalWrt_VERSION }}
        Device: CMCC RAX3000M
        LAN IP: 192.168.10.1
        USB Redirector: Built-in
        EOF
        
        # Summary
        echo "=== Artifacts ==="
        ls -la artifacts/firmware/ 2>/dev/null || echo "No firmware"
        ls -la artifacts/packages/ 2>/dev/null || echo "No packages"
        ls -la artifacts/info/ 2>/dev/null || echo "No info"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ImmortalWrt-RAX3000M-USBRedirector
        path: artifacts/
        retention-days: 30
