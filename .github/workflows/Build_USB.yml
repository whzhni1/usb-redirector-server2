name: Build ImmortalWrt Firmware with USB Redirector for CMCC RAX3000M

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  ImmortalWrt_VERSION: v23.05.6
  DEVICE_PROFILE: cmcc_rax3000m
  TARGET: mediatek
  SUBTARGET: filogic

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout USB Redirector Server
      uses: actions/checkout@v4
      with:
        path: usb-redirector-server

    - name: Maximize build space
      run: |
        echo "Before cleanup:"
        df -h
        
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        
        sudo apt-get remove -y '^firefox' '^thunderbird' '^libreoffice' '^google-chrome'
        sudo apt-get autoremove -y
        sudo apt-get clean
        
        echo "After cleanup:"
        df -h

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          ecj \
          fastjar \
          file \
          g++ \
          gawk \
          gettext \
          git \
          java-propose-classpath \
          libelf-dev \
          libncurses-dev \
          libssl-dev \
          python3 \
          python3-dev \
          python3-distutils \
          python3-setuptools \
          qemu-utils \
          rsync \
          subversion \
          swig \
          time \
          unzip \
          wget \
          xsltproc \
          zlib1g-dev

    - name: Clone ImmortalWrt
      run: |
        git clone --depth 1 --branch ${{ env.ImmortalWrt_VERSION }} https://github.com/ImmortalWrt/ImmortalWrt.git
        cd ImmortalWrt
        echo "ImmortalWrt version: $(git rev-parse HEAD)"

    - name: Update and install feeds
      run: |
        cd ImmortalWrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    # 替换原来的 "Copy USB Redirector package to ImmortalWrt" 步骤
    - name: Create wrapper for USB Redirector package
      run: |
        echo "=== Creating USB Redirector wrapper package ==="
        
        # 首先复制原始包
        echo "Copying original package..."
        cp -r usb-redirector-server ImmortalWrt/package/usb-redirector-server-orig
        
        # 显示原始包结构
        echo "Original package structure:"
        ls -la ImmortalWrt/package/usb-redirector-server-orig/
        
        # 创建新的包装器包
        mkdir -p ImmortalWrt/package/usb-redirector-server
        
        # 创建包装器Makefile
        cat > ImmortalWrt/package/usb-redirector-server/Makefile << 'EOF'
        include $(TOPDIR)/rules.mk
        
        PKG_NAME:=usb-redirector-server
        PKG_VERSION:=3.10
        PKG_RELEASE:=1
        
        PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)-$(PKG_VERSION)
        
        include $(INCLUDE_DIR)/package.mk
        include $(INCLUDE_DIR)/kernel.mk
        
        define Package/usb-redirector-server
        	SECTION:=utils
        	CATEGORY:=Utilities
        	TITLE:=USB Redirector Server
        	DEPENDS:=+kmod-usb-core
        endef
        
        define Package/usb-redirector-server/description
        	USB Redirector Server for OpenWrt/ImmortalWrt
        	Note: This package contains precompiled binaries
        endef
        
        define KernelPackage/usb-redirector-server
        	SUBMENU:=USB Support
        	TITLE:=USB Redirector kernel module
        	FILES:=$(PKG_BUILD_DIR)/vusbmod.ko
        	AUTOLOAD:=$(call AutoLoad,90,vusbmod)
        	DEPENDS:=+kmod-usb-core
        endef
        
        define Build/Prepare
        	mkdir -p $(PKG_BUILD_DIR)
        	# 复制原始包的文件
        	if [ -d ../usb-redirector-server-orig/usb-redirector-server ]; then \
        		$(CP) ../usb-redirector-server-orig/usb-redirector-server/* $(PKG_BUILD_DIR)/; \
        	elif [ -d ../usb-redirector-server-orig/files ]; then \
        		$(CP) ../usb-redirector-server-orig/files/* $(PKG_BUILD_DIR)/; \
        	else \
        		$(CP) ../usb-redirector-server-orig/* $(PKG_BUILD_DIR)/ 2>/dev/null || true; \
        	fi
        endef
        
        define Build/Configure
        endef
        
        define Build/Compile
        	# 如果有kernel module需要编译
        	if [ -f $(PKG_BUILD_DIR)/Makefile.kernel ]; then \
        		$(MAKE) -C "$(LINUX_DIR)" \
        			CROSS_COMPILE="$(TARGET_CROSS)" \
        			ARCH="$(LINUX_KARCH)" \
        			SUBDIRS="$(PKG_BUILD_DIR)" \
        			modules; \
        	fi
        endef
        
        # 自定义安装过程，绕过库检查
        define Package/usb-redirector-server/install
        	$(INSTALL_DIR) $(1)/usr/bin
        	$(INSTALL_DIR) $(1)/usr/sbin
        	$(INSTALL_DIR) $(1)/etc/init.d
        	$(INSTALL_DIR) $(1)/etc
        	$(INSTALL_DIR) $(1)/lib
        	
        	# 查找并安装二进制文件
        	@echo "Looking for binaries in $(PKG_BUILD_DIR)..."
        	@find $(PKG_BUILD_DIR) -type f -name "usbsrv*" -o -name "usbsrvd*" | head -5
        	
        	# 安装 usbsrv
        	if [ -f $(PKG_BUILD_DIR)/bin/aarch64-muslhf/usbsrv ]; then \
        		$(INSTALL_BIN) $(PKG_BUILD_DIR)/bin/aarch64-muslhf/usbsrv $(1)/usr/bin/; \
        	elif [ -f $(PKG_BUILD_DIR)/bin/aarch64/usbsrv ]; then \
        		$(INSTALL_BIN) $(PKG_BUILD_DIR)/bin/aarch64/usbsrv $(1)/usr/bin/; \
        	elif [ -f $(PKG_BUILD_DIR)/usbsrv ]; then \
        		$(INSTALL_BIN) $(PKG_BUILD_DIR)/usbsrv $(1)/usr/bin/; \
        	fi
        	
        	# 安装 usbsrvd
        	if [ -f $(PKG_BUILD_DIR)/bin/aarch64-muslhf/usbsrvd-srv ]; then \
        		$(INSTALL_BIN) $(PKG_BUILD_DIR)/bin/aarch64-muslhf/usbsrvd-srv $(1)/usr/sbin/usbsrvd; \
        	elif [ -f $(PKG_BUILD_DIR)/bin/aarch64/usbsrvd-srv ]; then \
        		$(INSTALL_BIN) $(PKG_BUILD_DIR)/bin/aarch64/usbsrvd-srv $(1)/usr/sbin/usbsrvd; \
        	elif [ -f $(PKG_BUILD_DIR)/usbsrvd-srv ]; then \
        		$(INSTALL_BIN) $(PKG_BUILD_DIR)/usbsrvd-srv $(1)/usr/sbin/usbsrvd; \
        	elif [ -f $(PKG_BUILD_DIR)/usbsrvd ]; then \
        		$(INSTALL_BIN) $(PKG_BUILD_DIR)/usbsrvd $(1)/usr/sbin/usbsrvd; \
        	fi
        	
        	# 安装配置文件
        	if [ -f $(PKG_BUILD_DIR)/usbsrvd.conf ]; then \
        		$(INSTALL_DATA) $(PKG_BUILD_DIR)/usbsrvd.conf $(1)/etc/; \
        	else \
        		echo "# USB Redirector Config" > $(1)/etc/usbsrvd.conf; \
        	fi
        	
        	# 安装启动脚本
        	if [ -f $(PKG_BUILD_DIR)/usbsrvd.init ]; then \
        		$(INSTALL_BIN) $(PKG_BUILD_DIR)/usbsrvd.init $(1)/etc/init.d/usbsrvd; \
        	else \
        		$(INSTALL_BIN) ./files/usbsrvd.init $(1)/etc/init.d/usbsrvd 2>/dev/null || \
        		echo "#!/bin/sh" > $(1)/etc/init.d/usbsrvd; \
        	fi
        	chmod +x $(1)/etc/init.d/usbsrvd
        	
        	# 创建兼容性脚本
        	cat > $(1)/lib/glibc-compat.sh << 'SCRIPT'
        #!/bin/sh
        ln -sf /lib/libc.so /lib/libc.so.6 2>/dev/null
        ln -sf /lib/libc.so /lib/libm.so.6 2>/dev/null
        ln -sf /lib/libc.so /lib/libpthread.so.0 2>/dev/null
        ln -sf /lib/libc.so /lib/librt.so.1 2>/dev/null
        ln -sf /lib/ld-musl-aarch64.so.1 /lib/ld-linux-aarch64.so.1 2>/dev/null
        SCRIPT
        	chmod +x $(1)/lib/glibc-compat.sh
        endef
        
        define KernelPackage/usb-redirector-server/install
        	$(INSTALL_DIR) $(1)/lib/modules/$(LINUX_VERSION)
        	if [ -f $(PKG_BUILD_DIR)/vusbmod.ko ]; then \
        		$(CP) $(PKG_BUILD_DIR)/vusbmod.ko $(1)/lib/modules/$(LINUX_VERSION)/; \
        	fi
        endef
        
        define Package/usb-redirector-server/postinst
        #!/bin/sh
        [ -n "$${IPKG_INSTROOT}" ] || {
        	/lib/glibc-compat.sh
        	/etc/init.d/usbsrvd enable 2>/dev/null
        	/etc/init.d/usbsrvd start 2>/dev/null
        }
        exit 0
        endef
        
        # 覆盖依赖检查
        PKG_CHECK_FORMAT_SECURITY:=0
        RSTRIP:=:
        STRIP:=/bin/true
        CHECK_DEPS:=0
        
        $(eval $(call BuildPackage,usb-redirector-server))
        $(eval $(call KernelPackage,usb-redirector-server))
        EOF
        
        # 修复缩进
        sed -i 's/^        /\t/g' ImmortalWrt/package/usb-redirector-server/Makefile
        
        # 创建files目录
        mkdir -p ImmortalWrt/package/usb-redirector-server/files
        
        # 创建启动脚本
        cat > ImmortalWrt/package/usb-redirector-server/files/usbsrvd.init << 'EOF'
        #!/bin/sh /etc/rc.common
        
        START=99
        STOP=10
        USE_PROCD=1
        
        start_service() {
        	# 创建兼容性链接
        	/lib/glibc-compat.sh 2>/dev/null || {
        		ln -sf /lib/libc.so /lib/libc.so.6 2>/dev/null
        		ln -sf /lib/libc.so /lib/libm.so.6 2>/dev/null
        		ln -sf /lib/libc.so /lib/libpthread.so.0 2>/dev/null
        		ln -sf /lib/libc.so /lib/librt.so.1 2>/dev/null
        	}
        	
        	procd_open_instance
        	procd_set_param command /usr/sbin/usbsrvd
        	procd_set_param respawn
        	procd_set_param stderr 1
        	procd_close_instance
        }
        
        stop_service() {
        	killall usbsrvd 2>/dev/null
        }
        EOF
        chmod +x ImmortalWrt/package/usb-redirector-server/files/usbsrvd.init
        
        echo "Wrapper package created successfully"

    # 在 network configuration 之前添加兼容性设置
    - name: Setup glibc compatibility
      run: |
        cd ImmortalWrt
        
        # 创建全局兼容性脚本
        mkdir -p files/etc/uci-defaults
        cat > files/etc/uci-defaults/00-glibc-compat << 'EOF'
        #!/bin/sh
        
        # Create glibc compatibility links for musl
        ln -sf /lib/libc.so /lib/libc.so.6 2>/dev/null
        ln -sf /lib/libc.so /lib/libm.so.6 2>/dev/null
        ln -sf /lib/libc.so /lib/libpthread.so.0 2>/dev/null
        ln -sf /lib/libc.so /lib/librt.so.1 2>/dev/null
        ln -sf /lib/ld-musl-aarch64.so.1 /lib/ld-linux-aarch64.so.1 2>/dev/null
        
        exit 0
        EOF
        chmod +x files/etc/uci-defaults/00-glibc-compat
        
        echo "Glibc compatibility setup created"

    # 后面的步骤保持不变...
    - name: Customize network configuration
      run: |
        cd ImmortalWrt
        
        # 创建自定义网络配置文件
        mkdir -p files/etc/config
        
        # 创建network配置文件，设置LAN IP为192.168.10.1
        cat > files/etc/config/network << 'EOF'
        config interface 'loopback'
        	option device 'lo'
        	option proto 'static'
        	option ipaddr '127.0.0.1'
        	option netmask '255.0.0.0'
        
        config globals 'globals'
        	option ula_prefix 'auto'
        
        config interface 'lan'
        	option device 'br-lan'
        	option proto 'static'
        	option ipaddr '192.168.10.1'
        	option netmask '255.255.255.0'
        	option ip6assign '60'
        
        config interface 'wan'
        	option device 'eth1'
        	option proto 'dhcp'
        
        config interface 'wan6'
        	option device 'eth1'
        	option proto 'dhcpv6'
        
        config device
        	option name 'br-lan'
        	option type 'bridge'
        	list ports 'lan1'
        	list ports 'lan2'
        	list ports 'lan3'
        EOF
        
        # 创建dhcp配置文件
        cat > files/etc/config/dhcp << 'EOF'
        config dnsmasq
        	option domainneeded '1'
        	option localise_queries '1'
        	option rebind_protection '1'
        	option rebind_localhost '1'
        	option local '/lan/'
        	option domain 'lan'
        	option expandhosts '1'
        	option authoritative '1'
        	option readethers '1'
        	option leasefile '/tmp/dhcp.leases'
        	option resolvfile '/tmp/resolv.conf.d/resolv.conf.auto'
        	option localservice '1'
        	option ednspacket_max '1232'
        
        config dhcp 'lan'
        	option interface 'lan'
        	option start '100'
        	option limit '150'
        	option leasetime '12h'
        	option dhcpv4 'server'
        	option dhcpv6 'server'
        	option ra 'server'
        	option ra_slaac '1'
        	list ra_flags 'managed-config'
        	list ra_flags 'other-config'
        
        config dhcp 'wan'
        	option interface 'wan'
        	option ignore '1'
        EOF
        
        echo "Network configuration customized: LAN IP set to 192.168.10.1"

    # 其余步骤保持不变...
    - name: Configure ImmortalWrt with USB Redirector built-in
      run: |
        cd ImmortalWrt
        
        cat > .config << EOF
        # Target
        CONFIG_TARGET_mediatek=y
        CONFIG_TARGET_mediatek_filogic=y
        CONFIG_TARGET_mediatek_filogic_DEVICE_cmcc_rax3000m=y
        
        # Build settings
        CONFIG_DEVEL=y
        CONFIG_CCACHE=y
        CONFIG_BUILD_LOG=y
        
        # Image settings
        CONFIG_TARGET_ROOTFS_INITRAMFS=y
        CONFIG_TARGET_ROOTFS_SQUASHFS=y
        
        # USB Support
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb3=y
        CONFIG_PACKAGE_kmod-usb-xhci-hcd=y
        CONFIG_PACKAGE_kmod-usb-xhci-mtk=y
        CONFIG_PACKAGE_kmod-usb-storage=y
        
        # USB Redirector - 内置到固件中
        CONFIG_PACKAGE_usb-redirector-server=y
        CONFIG_PACKAGE_kmod-usb-redirector-server=y
        
        # Basic system
        CONFIG_PACKAGE_base-files=y
        CONFIG_PACKAGE_busybox=y
        CONFIG_PACKAGE_dropbear=y
        CONFIG_PACKAGE_mtd=y
        CONFIG_PACKAGE_uci=y
        CONFIG_PACKAGE_opkg=y
        CONFIG_PACKAGE_netifd=y
        CONFIG_PACKAGE_usbutils=y
        
        # Network
        CONFIG_PACKAGE_ppp=y
        CONFIG_PACKAGE_ppp-mod-pppoe=y
        CONFIG_PACKAGE_odhcp6c=y
        CONFIG_PACKAGE_odhcpd-ipv6only=y
        
        # WiFi
        CONFIG_PACKAGE_kmod-mt7915-firmware=y
        CONFIG_PACKAGE_wpad-basic-mbedtls=y
        CONFIG_PACKAGE_hostapd-common=y
        CONFIG_PACKAGE_wireless-tools=y
        
        # LuCI
        CONFIG_PACKAGE_luci=y
        CONFIG_PACKAGE_luci-base=y
        CONFIG_PACKAGE_luci-mod-admin-full=y
        CONFIG_PACKAGE_luci-theme-bootstrap=y
        CONFIG_PACKAGE_luci-app-firewall=y
        CONFIG_PACKAGE_uhttpd=y
        CONFIG_PACKAGE_uhttpd-mod-ubus=y
        
        # Build info
        CONFIG_KERNEL_BUILD_USER="github-actions"
        CONFIG_KERNEL_BUILD_DOMAIN="github.com"
        EOF
        
        make defconfig
        
        echo "=== Configuration complete with USB Redirector built-in ==="
        
        # 显示USB Redirector相关配置
        echo "USB Redirector configuration:"
        grep -E "CONFIG_PACKAGE.*usb-redirector" .config

    - name: Download package sources
      run: |
        cd ImmortalWrt
        make download -j8 || make download -j1 V=s
        find dl -size -1024c -exec rm -f {} \;

    - name: Build ImmortalWrt firmware with USB Redirector
      run: |
        cd ImmortalWrt
        
        echo "=== Building ImmortalWrt firmware with USB Redirector built-in ==="
        
        # 如果需要，先单独编译USB Redirector包
        make package/usb-redirector-server/compile V=s || {
          echo "USB Redirector package build warning, continuing..."
        }
        
        # 构建完整固件
        make -j$(nproc) world || {
          echo "Parallel build failed, retrying with single thread..."
          make -j1 V=s world
        }
        
        echo "=== Firmware build completed ==="

    - name: Check build results
      run: |
        cd ImmortalWrt
        
        echo "=== Build Results ==="
        echo "Firmware images:"
        ls -lah bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/*.bin 2>/dev/null || echo "No .bin files"
        
        echo ""
        echo "Checking if USB Redirector is included in firmware:"
        # 检查固件中是否包含USB Redirector
        if [ -f bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/immortalwrt-*.manifest ]; then
          echo "Packages in firmware manifest:"
          grep -i "usb-redirector" bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/*.manifest || echo "USB Redirector not found in manifest"
        fi
        
        echo ""
        echo "Total packages built:"
        find bin/packages/ -name "*.ipk" | wc -l

    # 删除原来的 "Create custom startup script for USB Redirector" 步骤，因为已经在包装器中处理了

    - name: Organize artifacts
      if: always()
      run: |
        mkdir -p artifacts/firmware
        mkdir -p artifacts/packages
        mkdir -p artifacts/info
        
        # Copy firmware
        find ImmortalWrt/bin/targets/ -name "*.bin" -o -name "*.itb" | while read f; do
          cp -v "$f" artifacts/firmware/ 2>/dev/null || true
        done
        
        # Copy manifest files for verification
        find ImmortalWrt/bin/targets/ -name "*.manifest" | while read f; do
          cp -v "$f" artifacts/info/ 2>/dev/null || true
        done
        
        # Create info file
        cat > artifacts/info/build_info.txt << EOF
        Build Date: $(date)
        ImmortalWrt Version: ${{ env.ImmortalWrt_VERSION }}
        Device: CMCC RAX3000M
        LAN IP: 192.168.10.1
        USB Redirector: Built-in
        EOF
        
        # Summary
        echo "=== Artifacts ==="
        ls -la artifacts/firmware/ 2>/dev/null || echo "No firmware"
        ls -la artifacts/info/ 2>/dev/null || echo "No info"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ImmortalWrt-RAX3000M-USBRedirector
        path: artifacts/
        retention-days: 30
